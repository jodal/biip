[tool.poetry]
name = "biip"
version = "3.0.0"
description = "Biip interprets the data in barcodes."
authors = ["Stein Magnus Jodal <stein.magnus@jodal.no>"]
license = "Apache-2.0"
readme = "README.md"
homepage = "https://github.com/jodal/biip"
repository = "https://github.com/jodal/biip"
documentation = "https://biip.readthedocs.io"
keywords = ["barcodes", "ean", "isbn", "gs1", "gtin", "upc"]
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "Topic :: Software Development :: Libraries",
]

[tool.poetry.dependencies]
python = "^3.7.0"
importlib_metadata = { version = ">=1.6,<6.0", python = "<3.8" }
py-moneyed = { version = ">=0.8", optional = true }

[tool.poetry.extras]
money = ["py-moneyed"]

[tool.poetry.group.black.dependencies]
black = "^23.1.0"

[tool.poetry.group.darglint.dependencies]
darglint = "^1.8.1"

[tool.poetry.group.dev.dependencies]
beautifulsoup4 = "^4.11.2"
httpx = "^0.23.3"
nox = "^2022.11.21"
py-moneyed = "^3.0"
types-beautifulsoup4 = "^4.11.6.7"

[tool.poetry.group.docs.dependencies]
sphinx = ">=4,<6"
sphinx-rtd-theme = "^1.1.1"
sphinx-autodoc-typehints = "^1.12.0"

[tool.poetry.group.mypy.dependencies]
mypy = "^1.1.1"

[tool.poetry.group.pyright.dependencies]
pyright = "^1.1.298"

[tool.poetry.group.ruff.dependencies]
ruff = ">=0.0.254,<0.0.262"

[tool.poetry.group.tests.dependencies]
codecov = "^2.1.12"
coverage = { extras = ["toml"], version = "^7.2.1" }
pytest = "^7.2.2"
pytest-cov = "^4.0.0"
xdoctest = "^1.1.1"

[tool.black]
target-version = ["py37", "py38", "py39", "py310", "py311"]

[tool.coverage.paths]
source = ["src"]

[tool.coverage.run]
branch = true
source = ["biip"]

[tool.coverage.report]
fail_under = 100
show_missing = true

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "--xdoc"

[tool.mypy]
no_implicit_optional = true
warn_return_any = true
warn_redundant_casts = true
warn_unused_configs = true
strict_equality = true

[[tool.mypy.overrides]]
module = "biip.*"
disallow_untyped_defs = true

[tool.ruff]
select = [
    "A",   # flake8-builtins
    "ANN", # flake8-annotations
    "ARG", # flake8-unused-arguments
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "C90", # mccabe
    "D",   # pydocstyle
    "DTZ", # flake8-datetimez
    "E",   # pycodestyle
    "ERA", # eradicate
    "F",   # pyflakes
    "FBT", # flake8-boolean-trap
    "I",   # isort
    "INP", # flake8-no-pep420
    "ISC", # flake8-implicit-str-concat
    "N",   # pep8-naming
    "PGH", # pygrep-hooks
    "PIE", # flake8-pie
    "PLC", # pylint convention
    "PLE", # pylint error
    "PLR", # pylint refactor
    "PLW", # pylint warning
    "PT",  # flake8-pytest-style
    "PTH", # flake8-use-pathlib
    "Q",   # flake8-quotes
    "RET", # flake8-return
    "RSE", # flake8-raise
    "RUF", # ruff
    "SIM", # flake8-simplify
    "SLF", # flake8-self
    "T20", # flake8-print
    "TCH", # flake8-type-checking
    "TID", # flake8-tidy-imports
    "TRY", # tryceratops
    "UP",  # pyupgrade
    "W",   # pycodestyle
]
ignore = [
    "A003",    # builtin-attribute-shadowing
    "ANN101",  # missing-type-self
    "ANN102",  # missing-type-cls
    "PLR2004", # magic-value-comparison
    "RET504",  # unnecessary-assign
    "TRY003",  # raise-vanilla-args
    #
    # Equivalent to `pyupgrade --keep-runtime-typing`:
    "UP006", # deprecated-collection-type
    "UP007", # typing-union
]
target-version = "py37"

[tool.ruff.per-file-ignores]
"docs/*" = ["INP001"]
"scripts/*" = ["INP001", "T20"]
"tests/*" = ["D"]

[tool.ruff.isort]
known-first-party = ["biip"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.pyright]
pythonVersion = "3.7"
venvPath = "."
venv = ".venv"
typeCheckingMode = "strict"
# Already covered by tests and careful import ordering:
reportImportCycles = false
# Already covered by flake8-self:
reportPrivateUsage = false

[build-system]
requires = ["poetry-core>=1.0"]
build-backend = "poetry.core.masonry.api"
